.. _`subsec:processstate`:

Class ProcessState
~~~~~~~~~~~~~~~~~~

The ProcessState class is a virtual class that defines an interface
through which StackwalkerAPI can access the target process. It allows
access to registers and memory, and provides basic information about the
threads in the target process. StackwalkerAPI provides two default types
of objects: does a first party stackwalk, and does a third party
stackwalk.

A new class can be created by inheriting from this class and
implementing the necessary methods.

.. container:: apient

   static ProcessState \*getProcessStateByPid(Dyninst::PID pid)

.. container:: apient

   virtual unsigned getAddressWidth() = 0;

.. container:: apient

   typedef enum Arch_x86, Arch_x86_64, Arch_ppc32, Arch_ppc64
   Architecture; virtual Dyninst::Architecture getArchitecture() = 0;

.. container:: apient

   virtual bool getRegValue(Dyninst::MachRegister reg, Dyninst::THR_ID
   thread, Dyninst::MachRegisterVal &val) = 0

.. container:: apient

   virtual bool readMem(void \*dest, Address source, size_t size) = 0

.. container:: apient

   virtual bool getThreadIds(std::vector<Dyninst::THR_ID> &threads) = 0

.. container:: apient

   virtual bool getDefaultThread(Dyninst::THR_ID &default_tid) = 0

.. container:: apient

   virtual Dyninst::PID getProcessId()

.. container:: apient

   Walker \*getWalker() const;

.. container:: apient

   std::string getExecutablePath();

Class LibraryState
^^^^^^^^^^^^^^^^^^

is a helper class for that provides information about the current DSOs
(libraries and executables) that are loaded into a processâ€™ address
space. FrameSteppers frequently use the LibraryState to get the DSO
through which they are attempting to stack walk.

Each is represented using a object, which is defined as follows:

.. container:: apient

   typedef std::pair<std::string, Dyninst::Address> LibAddrPair

.. container:: apient

   virtual bool getLibraryAtAddr(Address addr, LibAddrPair &lib) = 0

.. container:: apient

   virtual bool getLibraries(std::vector<LibAddrPair> &libs) = 0

.. container:: apient

   virtual void notifyOfUpdate() = 0

.. container:: apient

   virtual Address getLibTrapAddress() = 0
