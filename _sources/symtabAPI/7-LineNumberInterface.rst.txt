.. _LineNoInterface:

API Reference - Line Number Interface
=====================================

This section describes the line number interface for the SymtabAPI
library. Currently this interface has the following capabilities:

-  Look up address ranges for a given line number.

-  Look up source lines for a given address.

-  Add new line information. This information will be available for
   lookup, but will not be included with an emitted object file.

In order to look up or add line information, the user/application must
have already parsed the object file and should have a Symtab handle to
the object file. For more information on line information lookups
through the Symtab class refer to Section
`[sec:symtabAPI] <#sec:symtabAPI>`__. The rest of this section describes
the classes that are part of the line number interface.

.. _LineInformation:

Class LineInformation
---------------------

This class represents an entire line map for a module. This contains
mappings from a line number within a source to the address ranges.

.. container:: apient

   bool getAddressRanges(const char \* lineSource, unsigned int LineNo,
   std::vector<AddressRange> & ranges)

.. container:: apient

   bool getSourceLines(Offset addressInRange, std::vector<Statement \*>
   & lines) bool getSourceLines(Offset addressInRange,
   std::vector<LineNoTuple> & lines)

.. container:: apient

   bool addLine(const char \* lineSource, unsigned int lineNo, unsigned
   int lineOffset, Offset lowInclusiveAddr, Offset highExclusiveAddr)

.. container:: apient

   bool addAddressRange(Offset lowInclusiveAddr, Offset
   highExclusiveAddr, const char\* lineSource, unsigned int lineNo,
   unsigned int lineOffset = 0);

.. container:: apient

   LineInformation::const_iterator begin() const

.. container:: apient

   LineInformation::const_iterator end() const

.. _Statement:

Class Statement
---------------

A is the base representation of line information.

=========== ============ ==========================================
Method name Return type  Method description
=========== ============ ==========================================
startAddr   Offset       Starting address of this line in the file.
endAddr     Offset       Ending address of this line in the file.
getFile     std::string  File that contains the line.
getLine     unsigned int Line number.
getColumn   unsigned int Starting column number.
=========== ============ ==========================================

For backwards compatibility, this class may also be referred to as a ,
and provides the following legacy member variables. They should not be
used and will be removed in a future version of SymtabAPI.

====== ============= ========================
Member Return type   Method description
====== ============= ========================
first  const char \* Equivalent to getFile.
second unsigned int  Equivalent to getLine.
column unsigned int  Equivalent to getColumn.
====== ============= ========================

.. _`subsec:LineNoIterating`:

Iterating over Line Information
-------------------------------

The class also provides the ability for iterating over its data (line
numbers and their corresponding address ranges). The following example
shows how to iterate over the line information for a given module using
SymtabAPI.

::

   //Example showing how to iterate over the line information for a given module.
   using namespace Dyninst;
   using namespace SymtabAPI;

   //Obj represents a handle to a parsed object file using symtabAPI
   //Module handle for the module
   Module *mod;

   //Find the module \lq foo\rq within the object.
   obj->findModuleByName(mod, "foo");

   // Get the Line Information for module foo.
   LineInformation *info = mod->getLineInformation();

   //Iterate over the line information
   LineInformation::const_iterator iter;
   for( iter = info->begin(); iter != info->end(); iter++)
   {
   // First component represents the address range for the line
   const std::pair<Offset, Offset> addrRange = iter->first;

   //Second component gives information about the line itself.
   LineNoTuple lt = iter->second;
   }
