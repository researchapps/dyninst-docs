.. _`sec:slicing`:

Class Slicer
------------

Class Slicer is the main interface for performing forward and backward
slicing. The slicing algorithm starts with a user provided Assignment
and generates a graph as the slicing results. The nodes in the generated
Graph are individual assignments that affect the starting assignment
(backward slicing) or are affected by the starting assignment (forward
slicing). The edges in the graph are directed and represent either data
flow dependencies or control flow dependencies.

We provide call back functions and allow users to control when to stop
slicing. In particular, class contains a collection of call back
functions that can control the specific behaviors of the slicer. Users
can inherit from the Predicates class to provide customized stopping
criteria for the slicer.

.. container:: apient

   Slicer(AssignmentPtr a, ParseAPI::Block \*block, ParseAPI::Function
   \*func, bool cache = true, bool stackAnalysis = true);

.. container:: apient

   GraphPtr forwardSlice(Predicates &predicates); GraphPtr
   backwardSlice(Predicates &predicates);

A slice is represented as a Graph. The nodes and edges are defined as
below:

.. container:: apient

   class SliceNode : public Node

.. container:: apient

   typedef boost::shared_ptr<SliceNode> Ptr; static SliceNode::Ptr
   SliceNode::create(AssignmentPtr ptr, ParseAPI::Block \*block,
   ParseAPI::Function \*func);

Class SliceNode has the following methods to retrieve information
associated the node:

+-------------+----------------------+------------------------------------------+
| Method name | Return type          | Method description                       |
+=============+======================+==========================================+
| block       | ParseAPI::Block\*    | Basic block of this SliceNode.           |
+-------------+----------------------+------------------------------------------+
| func        | ParseAPI::Function\* | Function of this SliceNode.              |
+-------------+----------------------+------------------------------------------+
| addr        | Address              | Address of this SliceNode.               |
+-------------+----------------------+------------------------------------------+
| assign      | Assignment::Ptr      | Assignment of this SliceNode.            |
+-------------+----------------------+------------------------------------------+
| format      | std::string          | String representation of this SliceNode. |
+-------------+----------------------+------------------------------------------+

.. container:: apient

   class SliceEdge : public Edge

.. container:: apient

   typedef boost::shared_ptr<SliceEdge> Ptr; static SliceEdge::Ptr
   create(SliceNode::Ptr source, SliceNode::Ptr target, AbsRegion
   const&data);

.. container:: apient

   const AbsRegion &data() const;

.. _`sec:slicing`:

Class Slicer::Predicates
------------------------

Class Predicates abstracts the stopping criteria of slicing. Users can
inherit this class to control slicing in various situations, including
whether or not to perform inter-procedural slicing, whether or not to
search for control flow dependencies, and whether or not to stop slicing
after discovering certain assignments. We provide a set of call back
functions that allow users to dynamically control the behavior of the
Slicer.

.. container:: apient

   Predicates();

.. container:: apient

   bool searchForControlFlowDep();

.. container:: apient

   void setSearchForControlFlowDep(bool cfd);

.. container:: apient

   virtual bool widenAtPoint(AssignmentPtr) return false;

.. container:: apient

   virtual bool endAtPoint(AssignmentPtr);

.. container:: apient

   typedef std::pair<ParseAPI::Function \*, int> StackDepth_t; typedef
   std::stack<StackDepth_t> CallStack_t; virtual bool
   followCall(ParseAPI::Function \* callee, CallStack_t & cs, AbsRegion
   argument);

.. container:: apient

   virtual std::vector<ParseAPI::Function \*>
   followCallBackward(ParseAPI::Block \* caller, CallStack_t & cs,
   AbsRegion argument);

.. container:: apient

   virtual bool addPredecessor(AbsRegion reg);

.. container:: apient

   virtual bool addNodeCallback(AssignmentPtr assign,
   std::set<ParseAPI::Edge*> &visited);
