Class Graph
-----------

We provide a generic graph interface, which allows users to add, delete,
and iterate nodes and edges in a graph. Our slicing algorithms are
implemented upon this graph interface, so users can inherit the defined
classes for customization.

.. container:: apient

   typedef boost::shared_ptr<Graph> Ptr;

.. container:: apient

   virtual void entryNodes(NodeIterator &begin, NodeIterator &end);

.. container:: apient

   virtual void exitNodes(NodeIterator &begin, NodeIterator &end);

.. container:: apient

   virtual void allNodes(NodeIterator &begin, NodeIterator &end);

.. container:: apient

   bool printDOT(const std::string& fileName);

.. container:: apient

   static Graph::Ptr createGraph();

.. container:: apient

   void insertPair(NodePtr source, NodePtr target, EdgePtr edge =
   EdgePtr());

.. container:: apient

   virtual void insertEntryNode(NodePtr entry); virtual void
   insertExitNode(NodePtr exit);

.. container:: apient

   virtual void markAsEntryNode(NodePtr entry); virtual void
   markAsExitNode(NodePtr exit);

.. container:: apient

   void deleteNode(NodePtr node); void addNode(NodePtr node);

.. container:: apient

   bool isEntryNode(NodePtr node); bool isExitNode(NodePtr node);

.. container:: apient

   void clearEntryNodes(); void clearExitNodes();

.. container:: apient

   unsigned size() const;

Class Node
----------

.. container:: apient

   typedef boost::shared_ptr<Node> Ptr;

.. container:: apient

   void ins(EdgeIterator &begin, EdgeIterator &end); void
   outs(EdgeIterator &begin, EdgeIterator &end);

.. container:: apient

   void ins(NodeIterator &begin, NodeIterator &end); void
   outs(NodeIterator &begin, NodeIterator &end);

.. container:: apient

   bool hasInEdges(); bool hasOutEdges();

.. container:: apient

   void deleteInEdge(EdgeIterator e); void deleteOutEdge(EdgeIterator
   e);

.. container:: apient

   virtual Address addr() const;

.. container:: apient

   virtual std::string format() const = 0;

.. container:: apient

   class NodeIterator;

Class Edge
----------

.. container:: apient

   typedef boost::shared_ptr<Edge> Edge::Ptr;

.. container:: apient

   static Edge::Ptr Edge::createEdge(const Node::Ptr source, const
   Node::Ptr target);

.. container:: apient

   Node::Ptr Edge::source() const; Node::Ptr Edge::target() const;

.. container:: apient

   void Edge::setSource(Node::Ptr source); void
   Edge::setTarget(Node::Ptr target);

.. container:: apient

   class EdgeIterator;
