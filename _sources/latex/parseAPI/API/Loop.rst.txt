Class Loop
----------

The Loop class represents code that may execute repeatedly. We detect
both natural loops (loops that have a single entry block) and
irreducible loops (loops that have multiple entry blocks). A back edge
is defined as an edge that has its source in the loop and has its target
being an entry block of the loop. It represents the end of an iteration
of the loop. For all the loops detected in a function, we also build a
loop nesting tree to represent the nesting relations between the loops.
See class for more details.

.. container:: apient

   Loop\* parent

.. container:: apient

   bool containsAddress(Address addr)

.. container:: apient

   bool containsAddressInclusive(Address addr)

.. container:: apient

   int getLoopEntries(vector<Block*>& entries);

.. container:: apient

   int getBackEdges(vector<Edge*> &edges)

.. container:: apient

   bool getContainedLoops(vector<Loop*> &loops)

.. container:: apient

   bool getOuterLoops(vector<Loop*> &loops)

.. container:: apient

   bool getLoopBasicBlocks(vector<Block*> &blocks)

.. container:: apient

   bool getLoopBasicBlocksExclusive(vector<Block*> &blocks)

.. container:: apient

   bool hasBlock(Block \*b);

.. container:: apient

   bool hasBlockExclusive(Block \*b);

.. container:: apient

   bool hasAncestor(Loop \*loop)

.. container:: apient

   Function \* getFunction();
