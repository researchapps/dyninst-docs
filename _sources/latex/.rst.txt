.. _`sec:abslocs`:

Class Absloc
------------

Class Absloc represents an abstract location. Abstract locations can
have the following types

.. container:: center

   ======== =================================================
   Type     Meaning
   ======== =================================================
   Register The abstract location represents a register
   Stack    The abstract location represents a stack variable
   Heap     The abstract location represents a heap variable
   Unknown  The default type of abstract location
   ======== =================================================

.. container:: apient

   static Absloc makePC(Dyninst::Architecture arch); static Absloc
   makeSP(Dyninst::Architecture arch); static Absloc
   makeFP(Dyninst::Architecture arch);

.. container:: apient

   bool isPC() const; bool isSP() const; bool isFP() const;

.. container:: apient

   Absloc();

.. container:: apient

   Absloc(MachRegister reg);

.. container:: apient

   Absloc(Address addr):

.. container:: apient

   Absloc(int o, int r, ParseAPI::Function \*f);

.. container:: apient

   std::string format() const;

.. container:: apient

   const Type& type() const;

.. container:: apient

   bool isValid() const;

.. container:: apient

   const MachRegister &reg() const;

.. container:: apient

   int off() const;

.. container:: apient

   int region() const;

.. container:: apient

   ParseAPI::Function \*func() const;

.. container:: apient

   Address addr() const;

.. container:: apient

   bool operator<(const Absloc &rhs) const; bool operator==(const Absloc
   &rhs) const; bool operator!=(const Absloc &rhs) const;

.. _`sec:absregion`:

Class AbsRegion
---------------

Class AbsRegion represents a set of abstract locations of the same type.

.. container:: apient

   AbsRegion();

.. container:: apient

   AbsRegion(Absloc::Type t);

.. container:: apient

   AbsRegion(Absloc a);

.. container:: apient

   bool contains(const Absloc::Type t) const; bool contains(const Absloc
   &abs) const; bool contains(const AbsRegion &rhs) const;

.. container:: apient

   bool containsOfType(Absloc::Type t) const;

.. container:: apient

   bool operator==(const AbsRegion &rhs) const; bool operator!=(const
   AbsRegion &rhs) const; bool operator<(const AbsRegion &rhs) const;

.. container:: apient

   const std::string format() const;

.. container:: apient

   Absloc absloc() const;

.. container:: apient

   Absloc::Type type() const;

.. container:: apient

   AST::Ptr generator() const;

.. container:: apient

   bool isImprecise() const;

Class AbsRegionConverter
------------------------

Class AbsRegionConverter converts instructions to abstract regions.

.. container:: apient

   AbsRegionConverter(bool cache, bool stack = true);

.. container:: apient

   void convertAll(InstructionAPI::Expression::Ptr expr, Address addr,
   ParseAPI::Function \*func, ParseAPI::Block \*block,
   std::vector<AbsRegion> &regions);

.. container:: apient

   void convertAll(InstructionAPI::Instruction::Ptr insn, Address addr,
   ParseAPI::Function \*func, ParseAPI::Block \*block,
   std::vector<AbsRegion> &used, std::vector<AbsRegion> &defined);

.. container:: apient

   AbsRegion convert(InstructionAPI::RegisterAST::Ptr reg);

.. container:: apient

   AbsRegion convert(InstructionAPI::Expression::Ptr expr, Address addr,
   ParseAPI::Function \*func, ParseAPI::Block \*block);
