.. _`subsec:walker`:

Class Walker
~~~~~~~~~~~~

The class allows users to walk call stacks and query basic information
about threads in a target process. The user should create a object for
each process from which they are walking call stacks. Each object is
associated with one process, but may walk call stacks on multiple
threads within that process. The class allows users to query for the
threads available for walking, and it allows you to specify a particular
thread whose call stack should be walked. Stackwalks are returned as a
vector of Frame objects.

Each Walker object contains three objects:

-  ProcessState

-  StepperGroup

-  SymbolLookup

These objects are part of the Callback Interface and can be used to
customize StackwalkerAPI. The object tells how to access data in the
target process, and it determines whether this collects first party or
third party stackwalks. will pick an appropriate default object based on
which factory method the users calls. The object is used to customize
how the steps through stack frames. The object is used to customize how
StackwalkerAPI looks up symbolic names of the function or object that
created a stack frame.

.. container:: apient

   static Walker \*newWalker() static Walker \*newWalker(Dyninst::PID
   pid) static Walker \*newWalker(Dyninst::PID pid, std::string
   executable) static Walker
   \*newWalker(Dyninst::ProcControlAPI::Process::ptr proc); static
   Walker \*newWalker(std::string executable, const
   std::vector<std::string> &argv) static Walker
   \*newWalker(ProcessState \*proc, StepperGroup \*steppergroup = NULL ,
   SymbolLookup \*lookup = NULL)

.. container:: apient

   static bool newWalker(const std::vector<Dyninst::PID> &pids,
   std::vector<Walker \*> &walkers_out) static bool newWalker(const
   std::vector<Dyninst::PID> &pids, std::vector<Walker \*> &walkers_out,
   std::string executable)

.. container:: apient

   bool walkStack(std::vector<Frame> &stackwalk, Dyninst::THR_ID thread
   = NULL_THR_ID)

.. container:: apient

   bool walkStackFromFrame(std::vector<Frame> &stackwalk, const Frame
   &frame)

.. container:: apient

   bool walkSingleFrame(const Frame &in, Frame &out)

.. container:: apient

   bool getInitialFrame(Frame &frame, Dyninst::THR_ID thread =
   NULL_THR_ID)

.. container:: apient

   bool getAvailableThreads(std::vector<Dyninst::THR_ID> &threads)

.. container:: apient

   ProcessState \*getProcessState() const

.. container:: apient

   StepperGroup \*getStepperGroup() const

.. container:: apient

   SymbolLookup \*getSymbolLookup() const

.. container:: apient

   bool addStepper(FrameStepper \*stepper)

.. container:: apient

   static SymbolReaderFactory \*getSymbolReader()

.. container:: apient

   static void setSymbolReader(SymbolReaderFactory \*);

.. container:: apient

   static void version(int &major, int &minor, int &maintenance)
