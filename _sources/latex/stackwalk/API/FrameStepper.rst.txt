.. _`subsec:framestepper`:

Class FrameStepper
~~~~~~~~~~~~~~~~~~

The class is an interface that tells StackwalkerAPI how to walk through
a specific type of stack frame. There may be many different ways of
walking through a stack frame on a platform, e.g, on Linux/x86 there are
different mechanisms for walking through system calls, signal handlers,
regular functions, and frameless functions. A single describes how to
walk through one of these types of stack frames.

A user can create their own classes that tell StackwalkerAPI how to walk
through new types of stack frames. A new object must be added to a
before it can be used.

In addition to walking through individual stack frames, a tells its when
it can be used. The registers address ranges that cover objects in the
target processâ€™ code space (such as functions). These address ranges
should contain the objects that will create stack frames through which
the can walk. If multiple objects have overlapping address ranges, then
a priority value is used to determine which should be attempted first.

is an interface class; it cannot be instantiated. Users who want to
develop new objects should inherit from this class and implement the the
desired virtual functions. The , and functions must be implemented; all
others may be overridden if desired.

.. container:: apient

   typedef enum gcf_success, gcf_stackbottom, gcf_not_me, gcf_error
   gcframe_ret_t

.. container:: apient

   virtual gcframe_ret_t getCallerFrame(const Frame &in, Frame &out) = 0

.. container:: apient

   virtual void registerStepperGroup(StepperGroup \*steppergroup)

.. container:: apient

   virtual unsigned getPriority() const = 0

.. container:: apient

   FrameStepper(Walker \*w);

.. container:: apient

   virtual ProcessState \*getProcessState();

.. container:: apient

   virtual Walker \*getWalker();

.. container:: apient

   typedef std::pair<std::string, Address> LibAddrPair; typedef enum
   library_load, library_unload lib_change_t; virtual void
   newLibraryNotification(LibAddrPair \*libAddr, lib_change_t change);

.. container:: apient

   virtual const char \*getName() const = 0;
