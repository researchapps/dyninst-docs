Class Type
----------

The class represents the types of variables, parameters, return values,
and functions. Instances of this class can represent language predefined
types (e.g. , ), already defined types in the Object File or binary
(e.g., structures compiled into the binary), or newly created types
(created using the create factory methods of the corresponding type
classes described later in this section) that are added to SymtabAPI by
the user.

As described in Section
`[subsec:typeInterface] <#subsec:typeInterface>`__, this class serves as
a base class for all the other classes in this interface. An object of
this class is returned from type look up operations performed through
the Symtab class described in Section
`[sec:symtabAPI] <#sec:symtabAPI>`__. The user can then obtain the
specific type object from the generic Type class object. The following
example shows how to get the specific object from a given object
returned as part of a look up operation.

::

   //Example shows how to retrieve a structure type object from a given ``Type'' object
   using namespace Dyninst;
   using namespace SymtabAPI;

   //Obj represents a handle to a parsed object file using symtabAPI
   //Find a structure type in the object file
   Type *structType = obj->findType(``structType1'');

   // Get the specific typeStruct object
   typeStruct *stType = structType->isStructType();

.. container:: apient

   string &getName()

.. container:: apient

   bool setName(string zname)

.. container:: apient

   typedef enumdataEnum, dataPointer, dataFunction, dataSubrange,
   dataArray, dataStructure, dataUnion, dataCommon, dataScalar,
   dataTypedef, dataReference, dataUnknownType, dataNullType,
   dataTypeClass dataClass;

.. container:: apient

   dataClass getDataClass()

.. container:: apient

   typeId_t getID()

.. container:: apient

   unsigned getSize()

.. container:: apient

   typeEnum \*getEnumType()

.. container:: apient

   typePointer \*getPointerType()

.. container:: apient

   typeFunction \*getFunctionType()

.. container:: apient

   typeRange \*getSubrangeType()

.. container:: apient

   typeArray \*getArrayType()

.. container:: apient

   typeStruct \*getStructType()

.. container:: apient

   typeUnion \*getUnionType()

.. container:: apient

   typeScalar \*getScalarType()

.. container:: apient

   typeCommon \*getCommonType()

.. container:: apient

   typeTypedef \*getTypedefType()

.. container:: apient

   typeRef \*getRefType()

Class typeEnum
--------------

This class represents an enumeration type containing a list of constants
with values. This class is derived from , so all those member functions
are applicable. inherits from the class.

.. container:: apient

   static typeEnum \*create(string &name, vector<pair<string, int> \*>
   &consts, Symtab \*obj = NULL) static typeEnum \*create(string &name,
   vector<string> &constNames, Symtab \*obj)

.. container:: apient

   bool addConstant(const string &constname, int value)

.. container:: apient

   std::vector<std::pair<std::string, int> > &getConstants();

.. container:: apient

   bool setName(const char\* name)

.. container:: apient

   bool isCompatible(Type \*type)

Class typeFunction
------------------

This class represents a function type, containing a list of parameters
and a return type. This class is derived from , so all the member
functions of class are applicable. inherits from the class.

.. container:: apient

   static typeFunction \*create(string &name, Type \*retType,
   vector<Type \*> &paramTypes, Symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

.. container:: apient

   bool addParam(Type \*type)

.. container:: apient

   Type \*getReturnType() const

.. container:: apient

   bool setRetType(Type \*rtype)

.. container:: apient

   bool setName(string &name)

.. container:: apient

   vector< Type \*> &getParams() const

Class typeScalar
----------------

This class represents a scalar type. This class is derived from , so all
the member functions of class are applicable. inherits from the Type
class.

.. container:: apient

   static typeScalar \*create(string &name, int size, Symtab \*obj =
   NULL)

.. container:: apient

   bool isSigned()

.. container:: apient

   bool isCompatible(Type \*type)

Class Field
-----------

This class represents a field in a container. For e.g. a field in a
structure/union type.

.. container:: apient

   typedef enum visPrivate, visProtected, visPublic, visUnknown
   visibility_t;

.. container:: apient

   Field(string &name, Type \*type, visibility_t vis = visUnknown)

.. container:: apient

   const string &getName()

.. container:: apient

   Type \*getType()

.. container:: apient

   int getOffset()

.. container:: apient

   visibility_t getVisibility()

Class fieldListType
-------------------

This class represents a container type. It is one of the three
categories of types as described in Section
`[subsec:typeInterface] <#subsec:typeInterface>`__. The structure and
the union types fall under this category. This class is derived from ,
so all the member functions of class are applicable. inherits from the
class.

.. container:: apient

   vector<Field \*> \*getComponents()

.. container:: apient

   void addField(std::string fieldname, Type \*type, int offsetVal = -1,
   visibility_t vis = visUnknown)

.. container:: apient

   void addField(unsigned num, std::string fieldname, Type \*type, int
   offsetVal = -1, visibility_t vis = visUnknown)

.. container:: apient

   void addField(Field \*fld)

.. container:: apient

   void addField(unsigned num, Field \*fld)

Class typeStruct : public fieldListType
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|  
| This class represents a structure type. The structure type is a
  special case of the container type. The fields of the structure
  represent the fields in this case. As a subclass of class , all
  methods in are applicable.

.. container:: apient

   static typeStruct \*create(string &name, vector<pair<string, Type
   \*>*> &flds, Symtab \*obj = NULL)

.. container:: apient

   static typeStruct \*create(string &name, vector<Field \*> &fields,
   Symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

Class typeUnion
~~~~~~~~~~~~~~~

|  
| This class represents a union type, a special case of the container
  type. The fields of the union type represent the fields in this case.
  As a subclass of class , all methods in are applicable. inherits from
  the class.

.. container:: apient

   static typeUnion \*create(string &name, vector<pair<string, Type
   \*>*> &flds, Symtab \*obj = NULL)

.. container:: apient

   static typeUnion \*create(string &name, vector<Field \*> &fields,
   Symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

Class typeCommon
~~~~~~~~~~~~~~~~

|  
| This class represents a common block type in fortran, a special case
  of the container type. The variables of the common block represent the
  fields in this case. As a subclass of class , all methods in are
  applicable. inherits from the class.

.. container:: apient

   vector<CBlocks \*> \*getCBlocks()

Class CBlock
~~~~~~~~~~~~

|  
| This class represents a common block in Fortran. Multiple functions
  can share a common block.

.. container:: apient

   bool getComponents(vector<Field \*> \*vars)

.. container:: apient

   bool getFunctions(vector<Symbol \*> \*funcs)

Class derivedType
-----------------

This class represents a derived type which is a reference to another
type. It is one of the three categories of types as described in Section
`[subsec:typeInterface] <#subsec:typeInterface>`__. The pointer,
reference and the typedef types fall under this category. This class is
derived from , so all the member functions of class are applicable.

.. container:: apient

   Type \*getConstituentType() const

Class typePointer
~~~~~~~~~~~~~~~~~

|  
| This class represents a pointer type, a special case of the derived
  type. The base type in this case is the type this particular type
  points to. As a subclass of class , all methods in are also
  applicable.

.. container:: apient

   static typePointer \*create(string &name, Type \*ptr, Symtab \*obj =
   NULL) static typePointer \*create(string &name, Type \*ptr, int size,
   Symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

.. container:: apient

   bool setPtr(Type \*ptr)

Class typeTypedef
~~~~~~~~~~~~~~~~~

|  
| This class represents a type, a special case of the derived type. The
  base type in this case is the . This particular type is typedefed to.
  As a subclass of class , all methods in are also applicable.

.. container:: apient

   static typeTypedef \*create(string &name, Type \*ptr, Symtab \*obj =
   NULL)

.. container:: apient

   bool isCompatible(Type \*type)

Class typeRef 
~~~~~~~~~~~~~

|  
| This class represents a reference type, a special case of the derived
  type. The base type in this case is the this particular type refers
  to. As a subclass of class , all methods in are also applicable here.

.. container:: apient

   static typeRef \*create(string &name, Type \*ptr, Symtab \* obj =
   NULL)

.. container:: apient

   bool isCompatible(Type \*type)

Class rangedType
----------------

This class represents a range type with a lower and an upper bound. It
is one of the three categories of types as described in section
`[subsec:typeInterface] <#subsec:typeInterface>`__. The sub-range and
the array types fall under this category. This class is derived from ,
so all the member functions of class are applicable.

.. container:: apient

   unsigned long getLow() const

.. container:: apient

   unsigned long getHigh() const

Class typeSubrange
~~~~~~~~~~~~~~~~~~

|  
| This class represents a sub-range type. As a subclass of class , all
  methods in are applicable here. This type is usually used to represent
  a sub-range of another type. For example, a can represent a sub-range
  of the array type or a new integer type can be declared as a sub range
  of the integer using this type.

.. container:: apient

   static typeSubrange \*create(string &name, int size, int low, int hi,
   symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

Class typeArray
~~~~~~~~~~~~~~~

|  
| This class represents an type. As a subclass of class , all methods in
  are applicable.

.. container:: apient

   static typeArray \*create(string &name, Type \*type, int low, int hi,
   Symtab \*obj = NULL)

.. container:: apient

   bool isCompatible(Type \*type)

.. container:: apient

   Type \*getBaseType() const
