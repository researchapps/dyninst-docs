.. _`sec:symtabAPI`:

API Reference - Symbol Table Interface
======================================

This section describes the symbol table interface for the SymtabAPI
library. Currently this interface has the following capabilities:

-  Parsing the symbols in a binary, either on disk or in memory

-  Querying for symbols

-  Updating existing symbol information

-  Adding new symbols

-  Exporting symbols in standard formats

-  Accessing relocation and exception information

-  Accessing and modifying header information

The symbol table information is represented by the Symtab, Symbol,
Archive, and Region classes. Module, Function, and Variable provide
abstractions that support common use patterns. Finally, LocalVar
represents function-local variables and parameters.

Class Symtab
------------

The class represents an object file either on-disk or in-memory. This
class is responsible for the parsing of the file information and holding
the data that can be accessed through look up functions.

+-------------+--------------+---------------------------------------+
| Method name | Return type  | Method description                    |
+=============+==============+=======================================+
|             | std::string  | Full path to the opened file or       |
|             |              | provided name for the memory image.   |
+-------------+--------------+---------------------------------------+
|             | std::string  | File name without path.               |
+-------------+--------------+---------------------------------------+
|             | std::string  | For archive (.a) files, returns the   |
|             |              | object file (.o) this Symtab          |
|             |              | represents.                           |
+-------------+--------------+---------------------------------------+
|             | unsigned     | Number of regions.                    |
+-------------+--------------+---------------------------------------+
|             | unsigned     | Total number of symbols in both the   |
|             |              | static and dynamic tables.            |
+-------------+--------------+---------------------------------------+
|             | char \*      | Pointer to memory image for the       |
|             |              | Symtab; not valid for disk files.     |
+-------------+--------------+---------------------------------------+
|             | Offset       | Offset of the first code segment from |
|             |              | the start of the binary.              |
+-------------+--------------+---------------------------------------+
|             | Offset       | Offset of the first data segment from |
|             |              | the start of the binary.              |
+-------------+--------------+---------------------------------------+
|             | Offset       | Size of the primary code-containing   |
|             |              | region, typically .text.              |
+-------------+--------------+---------------------------------------+
|             | Offset       | Size of the primary data-containing   |
|             |              | region, typically .data.              |
+-------------+--------------+---------------------------------------+
|             | bool         | True if the binary was compiled       |
|             |              | statically.                           |
+-------------+--------------+---------------------------------------+
|             | bool         | True if the file is an executable.    |
+-------------+--------------+---------------------------------------+
|             | bool         | True if the file is a shared library. |
+-------------+--------------+---------------------------------------+
|             | bool         | True if the file is can only be an    |
|             |              | executable, false otherwise including |
|             |              | files that are both exeutables and    |
|             |              | shared libraries. Typically files     |
|             |              | that are both executables and shared  |
|             |              | libraries are primarily used as       |
|             |              | libraries, if you need to determine   |
|             |              | specifics use the methods and .       |
+-------------+--------------+---------------------------------------+
|             | bool         | True if the file was stripped of      |
|             |              | symbol table information.             |
+-------------+--------------+---------------------------------------+
|             | unsigned     | Size (in bytes) of a pointer value in |
|             |              | the Symtab; 4 for 32-bit binaries and |
|             |              | 8 for 64-bit binaries.                |
+-------------+--------------+---------------------------------------+
|             | Architecture | Representation of the system          |
|             |              | architecture for the binary.          |
+-------------+--------------+---------------------------------------+
|             | Offset       | The suggested load offset of the      |
|             |              | file; typically 0 for shared          |
|             |              | libraries.                            |
+-------------+--------------+---------------------------------------+
|             | Offset       | The entry point (where execution      |
|             |              | begins) of the binary.                |
+-------------+--------------+---------------------------------------+
|             | Offset       | (Windows only) the OS-specified base  |
|             |              | offset of the file.                   |
+-------------+--------------+---------------------------------------+

.. container:: apient

   ObjectType getObjectType() const

.. container:: apient

   bool isExecutable() bool isSharedLibrary() bool isExec()

File opening/parsing
~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   static bool openFile(Symtab \*&obj, string filename)

.. container:: apient

   static bool openFile(Symtab \*&obj, char \*mem_image, size_t size,
   std::string name)

.. container:: apient

   static Symtab \*findOpenSymtab(string name)

Module lookup
~~~~~~~~~~~~~

.. container:: apient

   Module \*getDefaultModule()

.. container:: apient

   bool findModuleByName(Module \*&ret, const string name)

.. container:: apient

   bool findModuleByOffset(Module \*&ret, Offset offset)

.. container:: apient

   bool getAllModules(vector<module \*> &ret)

Function, Variable, and Symbol lookup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool findFuncByEntryOffset(Function \*&ret, const Offset offset)

.. container:: apient

   bool findFunctionsByName(std::vector<Function \*> &ret, const
   std::string name, NameType nameType = anyName, bool isRegex = false,
   bool checkCase = true)

.. container:: apient

   bool getContainingFunction(Offset offset, Function \*&ret)

.. container:: apient

   bool getAllFunctions(vector<Function \*> &ret)

.. container:: apient

   bool findVariablesByOffset(std::vector<Variable \*> &ret, const
   Offset offset)

.. container:: apient

   bool findVariablesByName(std::vector<Variable \*> &ret, const
   std::string name, NameType nameType = anyName, bool isRegex = false,
   bool checkCase = true)

.. container:: apient

   bool getAllVariables(vector<Variable \*> &ret)

.. container:: apient

   bool findSymbol(vector <Symbol \*> &ret, const string name,
   Symbol::SymbolType sType, NameType nameType = anyName, bool isRegex =
   false, bool checkCase = false)

.. container:: apient

   const vector<Symbol \*> \*findSymbolByOffset(Offset offset)

.. container:: apient

   bool getAllSymbols(vector<Symbol \*> &ret)

.. container:: apient

   bool getAllSymbolsByType(vector<Symbol \*> &ret, Symbol::SymbolType
   sType)

.. container:: apient

   bool getAllUndefinedSymbols(std::vector<Symbol \*> &ret)

Region lookup
~~~~~~~~~~~~~

.. container:: apient

   bool getCodeRegions(std::vector<Region \*>&ret)

.. container:: apient

   bool getDataRegions(std::vector<Region \*>&ret)

.. container:: apient

   bool getMappedRegions(std::vector<Region \*>&ret)

.. container:: apient

   bool getAllRegions(std::vector<Region \*>&ret)

.. container:: apient

   bool getAllNewRegions(std::vector<Region \*>&ret)

.. container:: apient

   bool findRegion(Region \*&reg, string sname)

.. container:: apient

   bool findRegion(Region \*&reg, const Offset addr, const unsigned long
   size)

.. container:: apient

   bool findRegionByEntry(Region \*&reg, const Offset soff)

.. container:: apient

   Region \*findEnclosingRegion(const Offset offset)

Insertion and modification
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool emit(string file)

.. container:: apient

   bool addLibraryPrereq(string lib)

.. container:: apient

   Function \*createFunction(std::string name, Offset offset, size_t
   size, Module \*mod = NULL)

.. container:: apient

   Variable \*createVariable(std::string name, Offset offset, size_t
   size, Module \*mod = NULL)

.. container:: apient

   bool addSymbol(Symbol \*newsym)

.. container:: apient

   bool addSymbol(Symbol \*newsym, Symbol \*referringSymbol)

.. container:: apient

   bool deleteFunction(Function \*func)

.. container:: apient

   bool deleteVariable(Variable \*var)

.. container:: apient

   bool deleteSymbol(Symbol \*sym)

.. container:: apient

   bool addRegion(Offset vaddr, void \*data, unsigned int dataSize,
   std::string name, Region::RegionType rType_, bool loadable = false,
   unsigned long memAlign = sizeof(unsigned), bool tls = false)

.. container:: apient

   Offset getFreeOffset(unsigned size)

.. container:: apient

   bool addRegion(Region \*newreg);

Catch and Exception block lookup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool getAllExceptions(vector<ExceptionBlock \*> &exceptions)

.. container:: apient

   bool findException(ExceptionBlock &excp, Offset addr)

.. container:: apient

   bool findCatchBlock(ExceptionBlock &excp, Offset addr, unsigned size
   = 0)

Symtab information
~~~~~~~~~~~~~~~~~~

.. container:: apient

   typedef enum obj_Unknown, obj_SharedLib, obj_Executable,
   obj_RelocatableFile, ObjectType;

.. container:: apient

   bool isCode(const Offset where) const

.. container:: apient

   bool isData(const Offset where) const

.. container:: apient

   bool isValidOffset(const Offset where) const

Line number information
~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool getAddressRanges(vector<pair<Offset, Offset> > & ranges, string
   lineSource, unsigned int LineNo)

.. container:: apient

   bool getSourceLines(vector<LineNoTuple> &lines, Offset
   addressInRange)

.. container:: apient

   bool addLine(string lineSource, unsigned int lineNo, unsigned int
   lineOffset, Offset lowInclusiveAddr, Offset highExclusiveAddr)

.. container:: apient

   bool addAddressRange(Offset lowInclusiveAddr, Offset
   highExclusiveAddr, string lineSource, unsigned int lineNo, unsigned
   int lineOffset = 0);

Type information
~~~~~~~~~~~~~~~~

.. container:: apient

   void parseTypesNow()

.. container:: apient

   bool findType(Type \*&type, string name)

.. container:: apient

   bool addType(Type \* type)

.. container:: apient

   static std::vector<Type \*> \* getAllstdTypes()

.. container:: apient

   static std::vector<Type \*> \* getAllbuiltInTypes()

.. container:: apient

   bool findLocalVariable(vector<localVar \*> &vars, string name)

.. container:: apient

   bool findVariableType(Type \*&type, std::string name)

.. container:: apient

   typedef enum ... SymtabError

.. container:: center

   +-------------------------+-------------------------------------------+
   | SymtabError enum        | Meaning                                   |
   +=========================+===========================================+
   | Obj_Parsing             | An error occurred during object           |
   |                         | parsing(internal error).                  |
   +-------------------------+-------------------------------------------+
   | Syms_To_Functions       | An error occurred in converting symbols   |
   |                         | to functions(internal error).             |
   +-------------------------+-------------------------------------------+
   | Build_Function_Lists    | An error occurred while building function |
   |                         | lists(internal error).                    |
   +-------------------------+-------------------------------------------+
   | No_Such_Function        | No matching function exists with the      |
   |                         | given inputs.                             |
   +-------------------------+-------------------------------------------+
   | No_Such_Variable        | No matching variable exists with the      |
   |                         | given inputs.                             |
   +-------------------------+-------------------------------------------+
   | No_Such_Module          | No matching module exists with the given  |
   |                         | inputs.                                   |
   +-------------------------+-------------------------------------------+
   | No_Such_Symbol          | No matching symbol exists with the given  |
   |                         | inputs.                                   |
   +-------------------------+-------------------------------------------+
   | No_Such_Region          | No matching region exists with the given  |
   |                         | inputs.                                   |
   +-------------------------+-------------------------------------------+
   | No_Such_Member          | No matching member exists in the archive  |
   |                         | with the given inputs.                    |
   +-------------------------+-------------------------------------------+
   | Not_A_File              | Binary to be parsed may be an archive and |
   |                         | not a file.                               |
   +-------------------------+-------------------------------------------+
   | Not_An_Archive          | Binary to be parsed is not an archive.    |
   +-------------------------+-------------------------------------------+
   | Duplicate_Symbol        | Duplicate symbol found in symbol table.   |
   +-------------------------+-------------------------------------------+
   | Export_Error            | Error occurred during export of modified  |
   |                         | symbol table.                             |
   +-------------------------+-------------------------------------------+
   | Emit_Error              | Error occurred during generation of       |
   |                         | modified binary.                          |
   +-------------------------+-------------------------------------------+
   | Invalid_Flags           | Flags passed are invalid.                 |
   +-------------------------+-------------------------------------------+
   | Bad_Frame_Data          | Stack walking DWARF information has bad   |
   |                         | frame data.                               |
   +-------------------------+-------------------------------------------+
   | No_Frame_Entry          | No stack walking frame data found in      |
   |                         | debug information for this location.      |
   +-------------------------+-------------------------------------------+
   | Frame_Read_Error        | Failed to read stack frame data.          |
   +-------------------------+-------------------------------------------+
   | Multiple_Region_Matches | Multiple regions match the provided data. |
   +-------------------------+-------------------------------------------+
   | No_Error                | Previous operation did not result in      |
   |                         | failure.                                  |
   +-------------------------+-------------------------------------------+

.. container:: apient

   static SymtabError getLastSymtabError()

.. container:: apient

   static string printError(SymtabError serr)

.. _Module:

Class Module
------------

This class represents the concept of a single source file. Currently,
Modules are only identified for the executable file; each shared library
is made up of a single Module, ignoring any source file information that
may be present. We also create a single module, called , for each Symtab
that contains any symbols for which module information was unavailable.
This may be compiler template code, or files produced without module
information.

.. container:: center

   ============================== ==============================
   supportedLanguages             Meaning
   ============================== ==============================
   lang_Unknown                   Unknown source language
   lang_Assembly                  Raw assembly code
   lang_C                         C source code
   lang_CPlusPlus                 C++ source code
   lang_GnuCPlusPlus              C++ with GNU extensions
   lang_Fortran                   Fortran source code
   lang_Fortran_with_pretty_debug Fortran with debug annotations
   lang_CMFortran                 Fortran with CM extensions
   ============================== ==============================

+-------------+--------------------+---------------------------------+
| Method name | Return type        | Method description              |
+=============+====================+=================================+
| isShared    | bool               | True if the module is for a     |
|             |                    | shared library, false for an    |
|             |                    | executable.                     |
+-------------+--------------------+---------------------------------+
| fullName    | std::string &      | Name, including path, of the    |
|             |                    | source file represented by the  |
|             |                    | module.                         |
+-------------+--------------------+---------------------------------+
| fileName    | std::string &      | Name, not including path, of    |
|             |                    | the source file represented by  |
|             |                    | the module.                     |
+-------------+--------------------+---------------------------------+
| language    | supportedLanguages | The source language used by the |
|             |                    | Module.                         |
+-------------+--------------------+---------------------------------+
| addr        | Offset             | Offset of the start of the      |
|             |                    | module, as reported by the      |
|             |                    | symbol table, assuming          |
|             |                    | contiguous modules.             |
+-------------+--------------------+---------------------------------+
| exec        | Symtab \*          | Symtab object that contains the |
|             |                    | module.                         |
+-------------+--------------------+---------------------------------+

Function, Variable, Symbol lookup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool findFunctionByEntryOffset(Function \*&ret, const Offset offset)

.. container:: apient

   typedef enum mangledName, prettyName, typedName, anyName NameType;

.. container:: apient

   bool findFunctionsByName(vector<Function> &ret, const string name,
   Symtab::NameType nameType = anyName, bool isRegex = false, bool
   checkCase = true)

.. container:: apient

   bool getAllFunctions(vector<Function \*> &ret)

.. container:: apient

   bool findVariablesByOffset(std::vector<Variable \*> &ret, const
   Offset offset)

.. container:: apient

   bool findVariablesByName(vector<Function> &ret, const string &name,
   Symtab::NameType nameType, bool isRegex = false, bool checkCase =
   true)

.. container:: apient

   bool getAllSymbols(vector<Symbol \*> &ret)

.. container:: apient

   bool getAllSymbolsByType(vector<Symbol \*> &ret, Symbol::SymbolType
   sType)

.. _line-number-information-1:

Line number information
~~~~~~~~~~~~~~~~~~~~~~~

.. container:: apient

   bool getAddressRanges(vector<pair<unsigned long, unsigned long> > &
   ranges, string lineSource, unsigned int lineNo)

.. container:: apient

   bool getSourceLines(vector<Statement \*> &lines, Offset
   addressInRange)

.. container:: apient

   LineInformation \*getLineInformation() const

.. container:: apient

   bool getStatements(std::vector<Statement \*> &statements)

.. _`subsubsec:typeInfo`:

Type information
~~~~~~~~~~~~~~~~

.. container:: apient

   bool findType(Type \* &type, string name)

.. container:: apient

   bool findLocalVariable(vector<localVar \*> &vars, string name)

.. container:: apient

   bool findVariableType(Type \*&type, std::string name)

.. _FunctionBase:

Class FunctionBase
------------------

The class provides a common interface that can represent either a
regular function or an inlined function.

+---------------+-----------------+----------------------------------+
| Method name   | Return type     | Method description               |
+===============+=================+==================================+
| getModule     | const Module \* | Module this function belongs to. |
+---------------+-----------------+----------------------------------+
| getSize       | unsigned        | Size encoded in the symbol       |
|               |                 | table; may not be actual         |
|               |                 | function size.                   |
+---------------+-----------------+----------------------------------+
| getRegion     | Region \*       | Region containing this function. |
+---------------+-----------------+----------------------------------+
| getReturnType | Type \*         | Type representing the return     |
|               |                 | type of the function.            |
+---------------+-----------------+----------------------------------+
| getName       | std::string     | Returns primary name of the      |
|               |                 | function (first mangled name or  |
|               |                 | DWARF name)                      |
+---------------+-----------------+----------------------------------+

.. container:: apient

   bool setModule (Module \*module)

.. container:: apient

   bool setSize (unsigned size)

.. container:: apient

   bool setOffset (Offset offset)

.. container:: apient

   bool addMangledName(string name, bool isPrimary)

.. container:: apient

   bool addPrettyName(string name, bool isPrimary)

.. container:: apient

   bool addTypedName(string name, bool isPrimary)

.. container:: apient

   bool getLocalVariables(vector<localVar \*> &vars)

.. container:: apient

   std::vector<VariableLocation> &getFramePtr()

.. container:: apient

   bool getParams(vector<localVar \*> &params)

.. container:: apient

   bool findLocalVariable(vector<localVar \*> &vars, string name)

.. container:: apient

   bool setReturnType(Type \*type)

.. container:: apient

   FunctionBase\* getInlinedParent()

.. container:: apient

   const InlineCollection& getInlines()

.. _Function:

Class Function
--------------

The class represents a collection of symbols that have the same address
and a type of . When appropriate, use this representation instead of the
underlying objects.

+---------------------+----------------------+----------------------+
| Method name         | Return type          | Method description   |
+=====================+======================+======================+
| getModule           | const Module \*      | Module this function |
|                     |                      | belongs to.          |
+---------------------+----------------------+----------------------+
| getOffset           | Offset               | Offset in the file   |
|                     |                      | associated with the  |
|                     |                      | function.            |
+---------------------+----------------------+----------------------+
| getSize             | unsigned             | Size encoded in the  |
|                     |                      | symbol table; may    |
|                     |                      | not be actual        |
|                     |                      | function size.       |
+---------------------+----------------------+----------------------+
| mangled_names_begin | Aggregate::name_iter | Beginning of a range |
|                     |                      | of unique names of   |
|                     |                      | symbols pointing to  |
|                     |                      | this function.       |
+---------------------+----------------------+----------------------+
| mangled_names_end   | Aggregate::name_iter | End of a range of    |
|                     |                      | unique names of      |
|                     |                      | symbols pointing to  |
|                     |                      | this function.       |
+---------------------+----------------------+----------------------+
| pretty_names_begin  | Aggregate::name_iter | As above, but        |
|                     |                      | prettified with the  |
|                     |                      | demangler.           |
+---------------------+----------------------+----------------------+
| pretty_names_end    | Aggregate::name_iter | As above, but        |
|                     |                      | prettified with the  |
|                     |                      | demangler.           |
+---------------------+----------------------+----------------------+
| typed_names_begin   | Aggregate::name_iter | As above, but        |
|                     |                      | including full type  |
|                     |                      | strings.             |
+---------------------+----------------------+----------------------+
| typed_names_end     | Aggregate::name_iter | As above, but        |
|                     |                      | including full type  |
|                     |                      | strings.             |
+---------------------+----------------------+----------------------+
| getRegion           | Region \*            | Region containing    |
|                     |                      | this function.       |
+---------------------+----------------------+----------------------+
| getReturnType       | Type \*              | Type representing    |
|                     |                      | the return type of   |
|                     |                      | the function.        |
+---------------------+----------------------+----------------------+

.. container:: apient

   bool getSymbols(vector<Symbol \*> &syms) const

.. container:: apient

   bool setModule (Module \*module)

.. container:: apient

   bool setSize (unsigned size)

.. container:: apient

   bool setOffset (Offset offset)

.. container:: apient

   bool addMangledName(string name, bool isPrimary)

.. container:: apient

   bool addPrettyName(string name, bool isPrimary)

.. container:: apient

   bool addTypedName(string name, bool isPrimary)

.. container:: apient

   bool getLocalVariables(vector<localVar \*> &vars)

.. container:: apient

   std::vector<VariableLocation> &getFramePtr()

.. container:: apient

   bool getParams(vector<localVar \*> &params)

.. container:: apient

   bool findLocalVariable(vector<localVar \*> &vars, string name)

.. container:: apient

   bool setReturnType(Type \*type)

.. _InlinedFunction:

Class InlinedFunction
---------------------

The class represents an inlined function, as found in DWARF information.
Its interface is almost entirely inherited from .

.. container:: apient

   std::pair<std::string, Dyninst::Offset> getCallsite()

Class Variable
--------------

The class represents a collection of symbols that have the same address
and represent data.

+---------------------+----------------------+----------------------+
| Method name         | Return type          | Method description   |
+=====================+======================+======================+
| getOffset           | Offset               | Offset associated    |
|                     |                      | with this variable.  |
+---------------------+----------------------+----------------------+
| getSize             | unsigned             | Size of this         |
|                     |                      | variable in the      |
|                     |                      | symbol table.        |
+---------------------+----------------------+----------------------+
| mangled_names_begin | Aggregate::name_iter | Beginning of a range |
|                     |                      | of unique names of   |
|                     |                      | symbols pointing to  |
|                     |                      | this variable.       |
+---------------------+----------------------+----------------------+
| mangled_names_end   | Aggregate::name_iter | End of a range of    |
|                     |                      | unique names of      |
|                     |                      | symbols pointing to  |
|                     |                      | this variable.       |
+---------------------+----------------------+----------------------+
| getType             | Type \*              | Type of this         |
|                     |                      | variable, if known.  |
+---------------------+----------------------+----------------------+
| getModule           | const Module \*      | Module that contains |
|                     |                      | this variable.       |
+---------------------+----------------------+----------------------+
| getRegion           | Region \*            | Region that contains |
|                     |                      | this variable.       |
+---------------------+----------------------+----------------------+

.. container:: apient

   bool getSymbols(vector<Symbol \*> &syms) const

.. container:: apient

   bool setModule (Module \*module)

.. container:: apient

   bool setSize (unsigned size)

.. container:: apient

   bool setOffset (Offset offset)

.. container:: apient

   bool addMangledName(string name, bool isPrimary)

.. container:: apient

   bool addPrettyName(string name, bool isPrimary)

.. container:: apient

   bool addTypedName(string name, bool isPrimary)

.. container:: apient

   bool setType(Type \*type)

Class Symbol
------------

The class represents a symbol in the object file. This class holds the
symbol information such as the mangled, pretty and typed names, the
module in which it is present, type, linkage, offset and size.

.. container:: center

   =========== ==========================================
   SymbolType  Meaning
   =========== ==========================================
   ST_UNKNOWN  Unknown type
   ST_FUNCTION Function or other executable code sequence
   ST_OBJECT   Variable or other data object
   ST_MODULE   Source file declaration
   ST_SETION   Region declaration
   ST_TLS      Thread-local storage declaration
   ST_DELETED  Deleted symbol
   ST_NOTYPE   Miscellaneous symbol
   =========== ==========================================

.. container:: center

   ============= =========================================
   SymbolLinkage Meaning
   ============= =========================================
   SL_UNKNOWN    Unknown linkage
   SL_GLOBAL     Process-global symbol
   SL_LOCAL      Process-local (e.g., static) symbol
   SL_WEAK       Alternate name for a function or variable
   ============= =========================================

The following two types are platform-specific:

.. container:: apient

   typedef enum SV_UNKNOWN, SV_DEFAULT, SV_INTERNAL, SV_HIDDEN,
   SV_PROTECTED SymbolVisibility;

.. container:: apient

   typedef enum TAG_UNKNOWN, TAG_USER, TAG_LIBRARY, TAG_INTERNAL
   SymbolTag;

+-----------------+------------------+-------------------------------+
| Method name     | Return type      | Method description            |
+=================+==================+===============================+
| getMangledName  | string           | Raw name of the symbol in the |
|                 |                  | symbol table, including name  |
|                 |                  | mangling.                     |
+-----------------+------------------+-------------------------------+
| getPrettyName   | string           | Demangled name of the symbol  |
|                 |                  | with parameters (for          |
|                 |                  | functions) removed.           |
+-----------------+------------------+-------------------------------+
| getTypedName    | string           | Demangled name of the symbol  |
|                 |                  | including full function       |
|                 |                  | parameters.                   |
+-----------------+------------------+-------------------------------+
| getModule       | Module \*        | The module, if any, that      |
|                 |                  | contains the symbol.          |
+-----------------+------------------+-------------------------------+
| getType         | SymbolType       | The symbol type (as defined   |
|                 |                  | above) of the symbol.         |
+-----------------+------------------+-------------------------------+
| getLinkage      | SymbolLinkage    | The linkage (as defined       |
|                 |                  | above) of the symbol.         |
+-----------------+------------------+-------------------------------+
| getVisibility   | SymbolVisibility | The visibility (as defined    |
|                 |                  | above) of the symbol.         |
+-----------------+------------------+-------------------------------+
| tag             | SymbolTag        | The tag (as defined above) of |
|                 |                  | the symbol.                   |
+-----------------+------------------+-------------------------------+
| getOffset       | Offset           | The offset of the object the  |
|                 |                  | symbols refers to.            |
+-----------------+------------------+-------------------------------+
| getSize         | unsigned         | The size of the object the    |
|                 |                  | symbol refers to.             |
+-----------------+------------------+-------------------------------+
| getRegion       | Region \*        | The region containing the     |
|                 |                  | symbol.                       |
+-----------------+------------------+-------------------------------+
| getIndex        | int              | The index of the symbol       |
|                 |                  | within the symbol table.      |
+-----------------+------------------+-------------------------------+
| getStrIndex     | int              | The index of the symbol name  |
|                 |                  | in the string table.          |
+-----------------+------------------+-------------------------------+
| isInDynSymtab   | bool             | If true, the symbol is        |
|                 |                  | dynamic and can be used as    |
|                 |                  | the target of an intermodule  |
|                 |                  | reference. Implies isInSymtab |
|                 |                  | is false.                     |
+-----------------+------------------+-------------------------------+
| isInSymtab      | bool             | If true, the symbol is        |
|                 |                  | static. Implies isInDynSymtab |
|                 |                  | is false.                     |
+-----------------+------------------+-------------------------------+
| isAbsolute      | bool             | If true, the offset encoded   |
|                 |                  | in the symbol is an absolute  |
|                 |                  | value rather than an offset.  |
+-----------------+------------------+-------------------------------+
| isFunction      | bool             | If true, the symbol refers to |
|                 |                  | a function.                   |
+-----------------+------------------+-------------------------------+
| getFunction     | Function \*      | The Function that contains    |
|                 |                  | this symbol if such a         |
|                 |                  | Function exists.              |
+-----------------+------------------+-------------------------------+
| isVariable      | bool             | If true, the symbol refers to |
|                 |                  | a variable.                   |
+-----------------+------------------+-------------------------------+
| getVariable     | Variable \*      | The Variable that contains    |
|                 |                  | this symbol if such a         |
|                 |                  | Variable exists.              |
+-----------------+------------------+-------------------------------+
| getSymtab       | Symtab \*        | The Symtab that contains this |
|                 |                  | symbol.                       |
+-----------------+------------------+-------------------------------+
| getPtrOffset    | Offset           | For binaries with an OPD      |
|                 |                  | section, the offset in the    |
|                 |                  | OPD that contains the         |
|                 |                  | function pointer data         |
|                 |                  | structure for this symbol.    |
+-----------------+------------------+-------------------------------+
| getLocalTOC     | Offset           | For platforms with a TOC      |
|                 |                  | register, the expected TOC    |
|                 |                  | for the object referred to by |
|                 |                  | this symbol.                  |
+-----------------+------------------+-------------------------------+
| isCommonStorage | bool             | True if the symbol represents |
|                 |                  | a common section (Fortran).   |
+-----------------+------------------+-------------------------------+

.. container:: apient

   SYMTAB_EXPORT Symbol(const std::string& name, SymbolType type,
   SymbolLinkage linkage, SymbolVisibility visibility, Offset offset,
   Module \*module = NULL, Region \*region = NULL, unsigned size = 0,
   bool dyamic = false, bool absolute = false, int index = -1, int
   strindex = -1, bool commonStorage = false)

.. container:: apient

   bool getVersionFileName(std::string &fileName)

.. container:: apient

   bool getVersions(std::vector<std::string> \*&vers)

.. container:: apient

   bool getVersionNum(unsigned &verNum)

Symbol modification
~~~~~~~~~~~~~~~~~~~

Most elements of a can be modified using the functions below. Each
returns on success and otherwise.

.. container:: apient

   bool setSize (unsigned size) bool setOffset (Offset newOffset) bool
   setMangledName (string name) bool setType (SymbolType sType) bool
   setModule (Module \*module) bool setRegion (Region \*region) bool
   setDynamic (bool dyn) bool setAbsolute (bool absolute) bool
   setCommonStorage (bool common) bool setFunction (Function \*func)
   bool setVariable (Variable \*var) bool setIndex (int index) bool
   setStrIndex (int index) bool setPtrOffset (Offset ptr) bool
   setLocalTOC (Offset toc) bool setVersionNum (unsigned num) bool
   setVersionFileName (std::string &fileName) bool setVersions
   (std::vector<std::string> &vers)

.. _Archive:

Class Archive
-------------

This is used only on ELF platforms. This class represents an archive.
This class has information of all the members in the archives.

.. container:: apient

   static bool openArchive(Archive \*&img, string name)

.. container:: apient

   static bool openArchive(Archive \*&img, char \*mem_image, size_t
   size)

.. container:: apient

   bool getMember(Symtab \*&img, string member_name)

.. container:: apient

   bool getMemberByOffset(Symtab \*&img, Offset memberOffset)

.. container:: apient

   bool getAllMembers(vector <Symtab \*> &members)

.. container:: apient

   bool isMemberInArchive(string member_name)

.. container:: apient

   bool findMemberWithDefinition(Symtab \*&obj, string name)

.. container:: apient

   static SymtabError getLastError()

.. container:: apient

   static string printError(SymtabError serr)

Class Region
------------

This class represents a contiguous range of code or data as encoded in
the object file. For ELF, regions represent ELF sections.

.. container:: center

   ====== ===============
   perm_t Meaning
   ====== ===============
   RP_R   Read-only data
   RP_RW  Read/write data
   RP_RX  Read-only code
   RP_RWX Read/write code
   ====== ===============

.. container:: center

   +-----------------+---------------------------------------------------+
   | RegionType      | Meaning                                           |
   +=================+===================================================+
   | RT_TEXT         | Executable code                                   |
   +-----------------+---------------------------------------------------+
   | RT_DATA         | Read/write data                                   |
   +-----------------+---------------------------------------------------+
   | RT_TEXTDATA     | Mix of code and data                              |
   +-----------------+---------------------------------------------------+
   | RT_SYMTAB       | Static symbol table                               |
   +-----------------+---------------------------------------------------+
   | RT_STRTAB       | String table used by the symbol table             |
   +-----------------+---------------------------------------------------+
   | RT_BSS          | 0-initialized memory                              |
   +-----------------+---------------------------------------------------+
   | RT_SYMVERSIONS  | Versioning information for symbols                |
   +-----------------+---------------------------------------------------+
   | RT_SYMVERDEF    | Versioning information for symbols                |
   +-----------------+---------------------------------------------------+
   | RT_SYMVERNEEDED | Versioning information for symbols                |
   +-----------------+---------------------------------------------------+
   | RT_REL          | Relocation section                                |
   +-----------------+---------------------------------------------------+
   | RT_RELA         | Relocation section                                |
   +-----------------+---------------------------------------------------+
   | RT_PLTREL       | Relocation section for PLT (inter-library         |
   |                 | references) entries                               |
   +-----------------+---------------------------------------------------+
   | RT_PLTRELA      | Relocation section for PLT (inter-library         |
   |                 | references) entries                               |
   +-----------------+---------------------------------------------------+
   | RT_DYNAMIC      | Decription of library dependencies                |
   +-----------------+---------------------------------------------------+
   | RT_HASH         | Fast symbol lookup section                        |
   +-----------------+---------------------------------------------------+
   | RT_GNU_HASH     | GNU-specific fast symbol lookup section           |
   +-----------------+---------------------------------------------------+
   | RT_OTHER        | Miscellaneous information                         |
   +-----------------+---------------------------------------------------+

+----------------------+---------------+-------------------------+
| Method name          | Return type   | Method description      |
+======================+===============+=========================+
| getRegionNumber      | unsigned      | Index of the region in  |
|                      |               | the file, starting at   |
|                      |               | 0.                      |
+----------------------+---------------+-------------------------+
| getRegionName        | std::string   | Name of the region      |
|                      |               | (e.g. .text, .data).    |
+----------------------+---------------+-------------------------+
| getPtrToRawData      | void \*       | Read-only pointer to    |
|                      |               | the region’s raw data   |
|                      |               | buffer.                 |
+----------------------+---------------+-------------------------+
| getDiskOffset        | Offset        | Offset within the file  |
|                      |               | where the region        |
|                      |               | begins.                 |
+----------------------+---------------+-------------------------+
| getDiskSize          | unsigned long | Size of the region’s    |
|                      |               | data in the file.       |
+----------------------+---------------+-------------------------+
| getMemOffset         | Offset        | Location where the      |
|                      |               | region will be loaded   |
|                      |               | into memory, modified   |
|                      |               | by the file’s base load |
|                      |               | address.                |
+----------------------+---------------+-------------------------+
| getMemSize           | unsigned long | Size of the region in   |
|                      |               | memory, including zero  |
|                      |               | padding.                |
+----------------------+---------------+-------------------------+
| isBSS                | bool          | Type query for          |
|                      |               | uninitialized data      |
|                      |               | regions (zero disk      |
|                      |               | size, non-zero memory   |
|                      |               | size).                  |
+----------------------+---------------+-------------------------+
| isText               | bool          | Type query for          |
|                      |               | executable code         |
|                      |               | regions.                |
+----------------------+---------------+-------------------------+
| isData               | bool          | Type query for          |
|                      |               | initialized data        |
|                      |               | regions.                |
+----------------------+---------------+-------------------------+
| getRegionPermissions | perm_t        | Permissions for the     |
|                      |               | region; perm\_ t is     |
|                      |               | defined above.          |
+----------------------+---------------+-------------------------+
| getRegionType        | RegionType    | Type of the region as   |
|                      |               | defined above.          |
+----------------------+---------------+-------------------------+
| isLoadable           | bool          | True if the region will |
|                      |               | be loaded into memory   |
|                      |               | (e.g., code or data),   |
|                      |               | false otherwise (e.g.,  |
|                      |               | debug information).     |
+----------------------+---------------+-------------------------+
| isDirty              | bool          | True if the region’s    |
|                      |               | raw data buffer has     |
|                      |               | been modified by the    |
|                      |               | user.                   |
+----------------------+---------------+-------------------------+

.. container:: apient

   static Region \*createRegion(Offset diskOff, perm_t perms, RegionType
   regType, unsigned long diskSize = 0, Offset memOff = 0, unsigned long
   memSize = 0, std::string name = "", char \*rawDataPtr = NULL, bool
   isLoadable = false, bool isTLS = false, unsigned long memAlign =
   sizeof(unsigned))

.. container:: apient

   bool isOffsetInRegion(const Offset &offset) const

.. container:: apient

   void setRegionNumber(unsigned index) const

.. container:: apient

   bool setPtrToRawData(void \*newPtr, unsigned long rawsize)

.. container:: apient

   bool setRegionPermissions(perm_t newPerms)

.. container:: apient

   bool setLoadable(bool isLoadable)

.. container:: apient

   bool addRelocationEntry(Offset relocationAddr, Symbol \*dynref,
   unsigned long relType, Region::RegionType rtype = Region::RT_REL)

.. container:: apient

   vector<relocationEntry> &getRelocations()

.. container:: apient

   bool addRelocationEntry(const relocationEntry& rel)

.. container:: apient

   bool patchData(Offset off, void \*buf, unsigned size);

REMOVED
~~~~~~~

The following methods were removed since they were inconsistent and
dangerous to use.

.. container:: apient

   Offset getRegionAddr() const

.. container:: apient

   unsigned long getRegionSize() const

Relocation Information
----------------------

This class represents object relocation information.

.. container:: apient

   Offset target_addr() const

.. container:: apient

   Offset rel_addr() const

.. container:: apient

   Offset addend() const

.. container:: apient

   const std::string name() const

.. container:: apient

   Symbol \*getDynSym() const

.. container:: apient

   unsigned long getRelType() const

.. _ExceptionBlock:

Class ExceptionBlock
--------------------

This class represents an exception block present in the object file.
This class gives all the information pertaining to that exception block.

=========== =========== ============================================
Method name Return type Method description
=========== =========== ============================================
hasTry      bool        True if the exception block has a try block.
tryStart    Offset      Start of the try block if it exists, else 0.
tryEnd      Offset      End of the try block if it exists, else 0.
trySize     Offset      Size of the try block if it exists, else 0.
catchStart  Offset      Start of the catch block.
=========== =========== ============================================

.. container:: apient

   bool contains(Offset addr) const

.. _localVar:

Class localVar
--------------

This represents a local variable or parameter of a function.

+-------------+-------------+----------------------------------------+
| Method name | Return type | Method description                     |
+=============+=============+========================================+
| getName     | string &    | Name of the local variable or          |
|             |             | parameter.                             |
+-------------+-------------+----------------------------------------+
| getType     | Type \*     | Type associated with the variable.     |
+-------------+-------------+----------------------------------------+
| getFileName | string &    | File where the variable was declared,  |
|             |             | if known.                              |
+-------------+-------------+----------------------------------------+
| getLineNum  | int         | Line number where the variable was     |
|             |             | declared, if known.                    |
+-------------+-------------+----------------------------------------+

.. container:: apient

   vector<VariableLocation> &getLocationLists()

.. _VariableLocation:

Class VariableLocation
----------------------

The class is an encoding of the location of a variable in memory or
registers.

.. container:: apient

   typedef enum storageUnset, storageAddr, storageReg, storageRegOffset
   storageClass;

   typedef enum storageRefUnset, storageRef, storageNoRef
   storageRefClass;

   struct VariableLocation storageClass stClass; storageRefClass
   refClass; MachRegister mr_reg; long frameOffset; Address lowPC;
   Address hiPC;

A is valid within the address range represented by and . If these are 0
and (Address) -1, respectively, the is always valid.

The location represented by the can be determined by the user as
follows:

-  stClass == storageAddr

   refClass == storageRef
      The frameOffset member contains the address of a pointer to the
      variable.

   refClass == storageNoRef
      The frameOffset member contains the address of the variable.

-  stClass == storageReg

   refClass == storageRef
      The register named by mr_reg contains the address of the variable.

   refClass == storageNoRef
      The register named by mr_reg member contains the variable.

-  stClass == storageRegOffset

   refClass == storageRef
      The address computed by adding frameOffset to the contents of
      mr_reg contains a pointer to the variable.

   refClass == storageNoRef
      The address computed by adding frameOffset to the contents of
      mr_reg contains the variable.
